% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getInteractingGenes.R
\name{getInteractingGenes}
\alias{getInteractingGenes}
\title{getInteractingGenes
Calculate Interaction Regions and Associated Genes
This function calculates statistically significant genes using a
non-parametric Kruskal-Wallis test for genes in any one region of influence
and a post hoc Dunn's test is used for analysis of genes between regions.}
\usage{
getInteractingGenes(
  data,
  spPatterns,
  refPattern = "Pattern_1",
  mode = c("residual", "DE"),
  optParams = NULL,
  reconstruction = NULL,
  hotspots = NULL,
  minOverlap = 50,
  ...
)
}
\arguments{
\item{data}{original spatial data matrix.}

\item{spPatterns}{A data frame that contains the spatial coordinates
for each cell type. The column names must include 'x' and 'y' as well as a
set of numbered columns named 'Pattern_1.....N'.}

\item{refPattern}{a character string that specifies the pattern whose
"interaction" with every other pattern we want
to study. The default value is "Pattern_1".}

\item{mode}{SpaceMarkers mode of operation. Possible values are
"residual" (the default) or "DE".}

\item{optParams}{a matrix with dimensions 2 X N, where N is the number
of patterns with optimal parameters for outlier
detection calculated from function getSpatialParameters(). The first row
contains the kernel width sigmaOpt for each
pattern, and the second row is the threshOpt (outlier threshold) for each
pattern. Users can also input their
preferred param values.
The default value is NULL.}

\item{reconstruction}{reconstruction of the data matrix from latent
spaces. Required for "residual" mode.}

\item{hotspots}{a vector that specifies the patterns to compare
to the 'refPattern'. The default is NULL which indicates that all patterns
would be compared to the 'refPattern'.}

\item{minOverlap}{a number that specifies the minimum overlap between
genes in two patterns to be considered for the statistical tests.
The default is 50.}

\item{...}{Arguments passed to methods}
}
\value{
a list of data frames with information about the interacting genes
of the refPattern and each latent feature pattern matrix
(interacting_genes object). There is also a data frame with all of the
regions of influence for any two of patterns (the hotspots object).
}
\description{
getInteractingGenes
Calculate Interaction Regions and Associated Genes
This function calculates statistically significant genes using a
non-parametric Kruskal-Wallis test for genes in any one region of influence
and a post hoc Dunn's test is used for analysis of genes between regions.
}
\examples{

#Visium data links
library(SpaceMarkers)
main_10xlink <- "https://cf.10xgenomics.com/samples/spatial-exp/1.3.0"
counts_folder <- "Visium_Human_Breast_Cancer"
counts_file <- "Visium_Human_Breast_Cancer_filtered_feature_bc_matrix.h5"
counts_url<-paste(c(main_10xlink,counts_folder,counts_file), collapse = "/")
sp_folder <- "Visium_FFPE_Human_Breast_Cancer"
sp_file <- "Visium_FFPE_Human_Breast_Cancer_spatial.tar.gz"
sp_url<-paste(c(main_10xlink,sp_folder,sp_file),collapse = "/")
cg_main <- "https://github.com/atuldeshpande/SpaceMarkers-paper/blob/main"
cg_folder <- "CoGAPS_Analysis/BreastCancer"
cg_file <- "182967_1168993F_2_CogapsResult_5.rds?raw=true"
cogaps_url <- paste(c(cg_main,cg_folder,cg_file), collapse = "/")
#Counts Matrix
system2("wget",c("-q",counts_url))
counts_matrix<-load10XExpr(visiumDir=".",h5filename = basename(counts_url))
good_gene_threshold <- 300
goodGenes <- rownames(counts_matrix)[apply(counts_matrix,1,function(x)
sum(x>0)>=good_gene_threshold)]
print(length(goodGenes))
goodGenes <- sample(goodGenes,100)
counts_matrix <- counts_matrix[goodGenes,]
# Latent Feature Space
system2("wget",c("-q",cogaps_url,"-O","CogapsResult_5.rds"))
cogaps_result <- readRDS("CogapsResult_5.rds")
cogaps_features <- slot(cogaps_result,"featureLoadings")
features <- intersect(rownames(counts_matrix),rownames(cogaps_features))
cogaps_barcodes <- slot(cogaps_result,"sampleFactors")
barcodes <- intersect(colnames(counts_matrix),rownames(cogaps_barcodes))
counts_matrix <- counts_matrix[features,barcodes]
cogaps_matrix <- cogaps_features[features,] \%*\% t(cogaps_barcodes[barcodes,])
# Spatial Coordinates
download.file(sp_url, basename(sp_url))
untar(basename(sp_url))
spCoords <- load10XCoords(visiumDir = ".")
rownames(spCoords) <- spCoords$barcode
spCoords <- spCoords[barcodes,]
spPatterns <- cbind(spCoords,slot(cogaps_result,"sampleFactors")[barcodes,])
#Get Breast Cancer data
data("optParams_breast_cancer")
SpaceMarkersMode <- "DE"
ref_Pattern <- "Pattern_1"
SpaceMarkers_DE <- getInteractingGenes(data = counts_matrix,
reconstruction = NULL,optParams = optParams_breast_cancer,
spPatterns = spPatterns,refPattern = ref_Pattern,mode = SpaceMarkersMode,
analysis = "enrichment")
unlink(sp_file)
files <- list.files(".")[grepl(counts_file,list.files("."))]
unlink(files)
unlink("CogapsResult_5.rds")
unlink("spatial", recursive = TRUE)
}
